git clone https://github.com/google/googletest.git
git checkout -b v1.8 remotes/origin/v1.8.x
mkdir build
cd build
cmake ..
make
make install


范式

#include <gtest/gtest.h>  
#include <gmock/gmock.h>  
using namespace testing;  
class A {
public:
  int set(int num) {
        value = num;
        return num;
  }
  int get() {
    return value;
  }
  int value;
};

class MockA : public A {
public:
  MOCK_METHOD1(set, int(int num));
  MOCK_METHOD0(get, int());

};

TEST(Atest, getnum)  
{  
    MockA m_A;  
    int a = 10;
    EXPECT_CALL(m_A, set(_)).WillRepeatedly(Return(a));
    int k = m_A.set(200);
    EXPECT_EQ(10, k);  
}

int main(int argc, char *argv[]) {
  ::testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}
    
g++ 1.cpp -o 1 -lgtest -lgmock -lpthread

自己实现一个gtest
#include <iostream>
#include <vector>
using namespace std;

class A
{
public:
  virtual void TestBody() = 0;
};



#define DISALLOW_COPY_AND_ASSIGN_(type) \
  type(type const &) = delete; \
  void operator=(type const &) = delete;

class TestFB {
public:
  virtual ~TestFB(){}
  virtual A* CreateTest() = 0;
protected:
  TestFB(){}
private:
  DISALLOW_COPY_AND_ASSIGN_(TestFB);
  //TestFB(TestFB const &) = delete;
  //void operator=(TestFB const &) = delete;
};

template<class TestClass>
class TestFactory : public TestFB{
public:
  virtual A* CreateTest() {return new TestClass;}
};


::std::vector<TestFB*> TestCaselists;

int reg(TestFB* fb)
{
   TestCaselists.push_back(fb);
   return 0;
}

class B : public A
{
public:
  static int test_info_  __attribute__ ((unused)); 
  virtual void TestBody(){
  cout << "TestBody " << endl;
}
  
};


int B::test_info_ = reg(new TestFactory<B>);

# define TEST(test_case_name, test_name) \
  class test_case_name##_##test_name##_Test : public A { \
public: \
  static int test_info_  __attribute__ ((unused)); \
  virtual void TestBody(); \
};\
int test_case_name##_##test_name##_Test::test_info_ = reg(new TestFactory<test_case_name##_##test_name##_Test>);\
void test_case_name##_##test_name##_Test::TestBody()

TEST(c,d)
{
  cout << "cd" << endl;
}


int main()
{
  cout << "asd" << endl;

  for(const auto& it:TestCaselists)
  {
     it->CreateTest()->TestBody();
  }
  //TestFB* t = TestCaselists.front();
 

  return 0;

}


