sudo mv "Google Chrome" Google.ori
vi "Google Chrome"
#!/bin/bash
"/Applications/Google Chrome.app/Contents/MacOS/Google.ori" --args --disable-web-security --unsafely-treat-insecure-origin-as-secure="http://116.62.173.161:8080" --user-data-dir=/Users/chenpeiwen/opt/userdatadir $1
sudo chmod u+x "Google Chrome"

vi 1.html
<html>
	<head>
		<title>WebRTC capture video and audio</title>

		<style>
			.none{
				-webkit-filter: none;
			}
			.blur{
				-webkit-filter: blur(3px);
			}
			.grayscale{
				-webkit-filter: grayscale(1);
			}
			.invert{
				-webkit-filter: invert(1);
			}
			.sepia{
				-webkit-filter: sepia(1);
			}
		</style>
	</head>
	<body>
		<div>
			<label>audio Source:</label>
		<select id="audioSource"></select>
		</div>
		<div>
			<label>audio Output:</label>
		<select id="audioOutput"></select>
		</div>
		<div>
			<label>video Source:</label>
		<select id="videoSource"></select>
		</div>

		<div>
			<label>Filter:</label>
			<select id="filter">
				<option value="none">None</option>
				<option value="blur">Blur</option>
				<option value="grayscale">Grayscale</option>
				<option value="invert">Invert</option>
				<option value="sepia">Sepia</option>
			</select>
		</div>

		<section>
			<table><tr><td>
						<video autoplay playsinline id="player"></video></td><td><div id='constraints' class='output'></div></td>
						<video playsinline id="recplayer"></video></td><td><div id='constraints' class='output'></div></td>
				</tr>
				<tr>
				<td><button id="record">Start Record</button></td>
				<td><button id="recplay" disabled=true>Record Play</button></td>
				<td><button id="download" disabled=true>Download</button></td>
			</tr>
			</table>
		</section>
		<audio autoplay controls id='audioplayer'></audio>

		<div>
	<button id="snapshot">Take snapshout</button>
</div>
<div>
	<canvas id="picture"></canvas>
</div>
<script>
var audioSource = document.querySelector('select#audioSource');
var audioOutput = document.querySelector('select#audioOutput');
var videoSource = document.querySelector('select#videoSource');
var videoplay = document.querySelector('video#player');
var filterSelect = document.querySelector('select#filter');
var audioplay = document.querySelector('audio#audioplayer');
var divConstraints = document.querySelector('div#constraints');
var recvideo = document.querySelector('video#recplayer');
var btnRecord = document.querySelector('button#record');
var btnPlay = document.querySelector('button#recplay');
var btnDownload = document.querySelector('button#download');
var buffer;
var mediaRecorder;
var pc = new RTCPeerConnection();
	function gotDevices(deviceInfos){
			console.log("deviceInfos:",deviceInfos)
			deviceInfos.forEach(function(deviceinfo){
var option = document.createElement('option');
						option.text = deviceinfo.label;
							option.value = deviceinfo.deviceId;
					if(deviceinfo.kind === 'audioinput'){
	audioSource.appendChild(option);
						}else if(deviceinfo.kind === 'audiooutput'){
	audioOutput.appendChild(option);
							}else if(deviceinfo.kind === 'videoinput'){
	videoSource.appendChild(option);
								}
				})
		}
	function handleError(err){
console.log('getUserMedia error:',err);
		}
	function gotMediaStream(stream){
		stream.getTracks().forEach((track)=>{
				pc.addTrack(track);
					})
	var options = {
		offerToReceiveAudio:0,
		offerToReceiveVideo:1,
		iceRestart:false
		}
	pc.createOffer(options).then(getOffer).catch(handleError);

videoplay.srcObject = stream;
			var videoTrack = stream.getVideoTracks()[0];
			var videoConstraints = videoTrack.getSettings();
			divConstraints.textContent = JSON.stringify(videoConstraints,null,2);
	window.stream = stream;
	return navigator.mediaDevices.enumerateDevices();
		}

	function getOffer(desc){
	console.log(desc.sdp);
	pc.setLocalDescription(desc);
	}

	function start(){
	var constraints = {
			audio:{
noiseSuppression:true,
					echoCancellation:true
				},
			video : {
				width:640,
				height:480,
				frameRate:30,
					facingMode:'enviroment'
				}
	} 
	//navigator.mediaDevices.getDisplayMedia(constraints)
	navigator.mediaDevices.getUserMedia(constraints)
	.then(gotMediaStream)
	.then(gotDevices)
	.catch(handleError);
}
	start();
	var btn_snapshot = document.querySelector('button#snapshot');
	var canv_picture = document.querySelector('canvas#picture'); 
	btn_snapshot.onclick = function(){
 		console.log("snapshot...");
		canv_picture.getContext('2d').drawImage(videoplay,0,0,320,240);
	}
	filterSelect.onchange = function(){
  		videoplay.className = filterSelect.value;	
	}
	function handleDataAvailable(e){
		if(e && e.data && e.data.size > 0 ){
			buffer.push(e.data);
		}
	}
	function startRecord(){
		buffer = [];
		var options = {
			mimeType: 'video/webm;codecs=vp8'
			}
		if(!MediaRecorder.isTypeSupported(options.mimeType)){
			console.error(`${options.mimeType} is not supported!`);
			return ;
		}
		try{
			mediaRecorder = new MediaRecorder(window.stream,options);
		}catch(e){
			console.error('Failed to create MediaRecorder:',e);
			return ;
		}
		mediaRecorder.ondataavailable = handleDataAvailable;
		mediaRecorder.start(10);
	}
	function stopRecord(){
		mediaRecorder.stop(); 
	}
	btnRecord.onclick = ()=>{
		if(btnRecord.textContent === 'Start Record'){
			startRecord();
			btnPlay.disabled = true;
			btnDownload.disabled = true;
			btnRecord.textContent = 'Stop Record';
		}else {
			stopRecord();
			btnRecord.textContent = 'Start Record';
			btnPlay.disabled = false;
			btnDownload.disabled = false;
		}
	}
	btnPlay.onclick = ()=> {
		var blob = new Blob(buffer,{type: 'video/webm'});
		recvideo.src = window.URL.createObjectURL(blob);
		recvideo.srcObject = null;
		recvideo.controls = true;
		recvideo.play();
	}
	btnDownload.onclick = ()=>{
			console.log('debug download...')
		var blob = new Blob(buffer,{type: 'video/webm'});
		var url = window.URL.createObjectURL(blob);
		var a = document.createElement('a');
		a.href = url;
		a.style.display = 'none';
		a.download = 'aaa.webm';
		a.click();
	}
</script>
	</body>
</html>


